{"ast":null,"code":"var _jsxFileName = \"/Users/jk/Documents/GitHub/faucet/src/App.js\";\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { async, ninvoke } from 'q';\nimport Web3 from \"web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction App() {\n  const [web3Api, setWeb3Api] = useState({\n    provider: null,\n    web3: null\n  });\n  const [account, setAccount] = useState(null);\n  useEffect(() => {\n    const loadProvider = async () => {\n      const provider = await detectEthereumProvider();\n\n      if (provider) {\n        provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        setWeb3Api({\n          web3: new Web3(provider),\n          provider\n        });\n      } else {\n        console.error(\"Please, install Metamask\");\n      } // if (window.ethereum) {\n      //   provider = window.ethereum;\n      //   try {\n      //     await provider.request({method: \"eth_requestAccounts\"});\n      //   } catch {\n      //     console.error(\"User denied accounts access!\")\n      //   }\n      // } else if (window.web3) {\n      //   provider = window.web3.currentProvider\n      // } else if (!process.env.production) {\n      //   provider = new Web3.providers.HttpProvider(\"http://localhost:7545\")\n      // }\n      // setWeb3Api({\n      //   web3: new Web3(provider),\n      //   provider\n      // })\n      // with metamask we haev an access to window.ethereum & to window.web3\n      // metamask injects a global API into website\n      // this API allows websites to request users, accounts, read data to blockchain,\n      // sign messages and transactions\n      // console.log(window.web3)\n      // console.log(window.ethereum)\n\n    };\n\n    loadProvider();\n  }, []);\n  useEffect(() => {\n    const getAccount = async () => {\n      const accounts = await web3Api.web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    };\n\n    web3Api.web3 && getAccount();\n  }, [web3Api.web3]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"faucet-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"faucet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Account: \")), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, account ? account : \"not connected\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"balance-view is-size-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Current Balance: \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 30\n    }\n  }, \"10\"), \" ETH\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button is-primary is-light mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Donate\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button is-link is-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Withdraw\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jk/Documents/GitHub/faucet/src/App.js"],"names":["React","Component","useEffect","useState","async","ninvoke","Web3","detectEthereumProvider","App","web3Api","setWeb3Api","provider","web3","account","setAccount","loadProvider","request","method","console","error","getAccount","accounts","eth","getAccounts"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAO,WAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,6BAApC;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,GAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC;AACrCQ,IAAAA,QAAQ,EAAE,IAD2B;AAErCC,IAAAA,IAAI,EAAE;AAF+B,GAAD,CAAtC;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,YAAY,GAAG,YAAY;AAC/B,YAAMJ,QAAQ,GAAG,MAAMJ,sBAAsB,EAA7C;;AAEA,UAAII,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACK,OAAT,CAAiB;AAACC,UAAAA,MAAM,EAAE;AAAT,SAAjB;AACAP,QAAAA,UAAU,CAAC;AACTE,UAAAA,IAAI,EAAE,IAAIN,IAAJ,CAASK,QAAT,CADG;AAETA,UAAAA;AAFS,SAAD,CAAV;AAID,OAND,MAMO;AACLO,QAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;AACD,OAX8B,CAa/B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACD,KAvCD;;AAyCAJ,IAAAA,YAAY;AACb,GA3CQ,EA2CN,EA3CM,CAAT;AA6CAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACG,IAAR,CAAaU,GAAb,CAAiBC,WAAjB,EAAvB;AACAT,MAAAA,UAAU,CAACO,QAAQ,CAAC,CAAD,CAAT,CAAV;AACD,KAHD;;AAKDZ,IAAAA,OAAO,CAACG,IAAR,IAAgBQ,UAAU,EAA1B;AACA,GAPQ,EAON,CAACX,OAAO,CAACG,IAAT,CAPM,CAAT;AASA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,OAAO,GAAGA,OAAH,GAAa,eADxB,CAJF,eAOE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADnB,SAPF,eAmBE;AAAQ,IAAA,SAAS,EAAC,iCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoBE;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF,CADF,CADF,CADF;AA4BD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { Component }  from 'react';\nimport \"./App.css\"\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { async, ninvoke } from 'q';\nimport Web3 from \"web3\";\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nfunction App() {\n  const [web3Api, setWeb3Api] = useState({\n    provider: null,\n    web3: null\n  })\n\n  const [account, setAccount] = useState(null)\n\n  useEffect(() => {\n    const loadProvider = async () => {\n      const provider = await detectEthereumProvider()\n\n      if (provider) {\n        provider.request({method: \"eth_requestAccounts\"})\n        setWeb3Api({\n          web3: new Web3(provider),\n          provider\n        })\n      } else {\n        console.error(\"Please, install Metamask\")\n      }\n\n      // if (window.ethereum) {\n      //   provider = window.ethereum;\n\n      //   try {\n      //     await provider.request({method: \"eth_requestAccounts\"});\n      //   } catch {\n      //     console.error(\"User denied accounts access!\")\n      //   }\n      // } else if (window.web3) {\n      //   provider = window.web3.currentProvider\n      // } else if (!process.env.production) {\n      //   provider = new Web3.providers.HttpProvider(\"http://localhost:7545\")\n      // }\n\n      // setWeb3Api({\n      //   web3: new Web3(provider),\n      //   provider\n      // })\n\n      // with metamask we haev an access to window.ethereum & to window.web3\n      // metamask injects a global API into website\n      // this API allows websites to request users, accounts, read data to blockchain,\n      // sign messages and transactions\n\n      // console.log(window.web3)\n      // console.log(window.ethereum)\n    }\n\n    loadProvider()\n  }, [])\n\n  useEffect(() => {\n    const getAccount = async () => {\n      const accounts = await web3Api.web3.eth.getAccounts()\n      setAccount(accounts[0])\n    }\n\n   web3Api.web3 && getAccount()\n  }, [web3Api.web3])\n\n  return (\n    <>\n      <div className=\"faucet-wrapper\">\n        <div className=\"faucet\">\n          <span>\n            <strong>Account: </strong>\n          </span>\n          <h1>\n            { account ? account : \"not connected\" }\n          </h1>\n          <div className=\"balance-view is-size-2\">\n            Current Balance: <strong>10</strong> ETH\n          </div>\n          {/* <button \n            className=\"btn mr-2\"\n            onClick={async () => {\n              const accounts = await window.ethereum.request({method: \"eth_requestAccounts\"})\n              console.log(accounts)\n            }}\n          >\n            Enable Ethereum\n          </button> */}\n          <button className=\"button is-primary is-light mr-2\">Donate</button>\n          <button className=\"button is-link is-light\">Withdraw</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}